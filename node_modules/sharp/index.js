import { promises as fs } from 'fs';

class Sharp {
  constructor(file) { this.file = file; }

  async metadata() {
    const buf = await fs.readFile(this.file);
    if (buf.slice(0,8).toString('hex') === '89504e470d0a1a0a') {
      const width = buf.readUInt32BE(16);
      const height = buf.readUInt32BE(20);
      return { width, height };
    }
    if (buf.readUInt16BE(0) === 0xffd8) {
      let i = 2;
      while (i < buf.length) {
        if (buf[i] === 0xff && (buf[i+1] >= 0xc0 && buf[i+1] <= 0xc3)) {
          const h = buf.readUInt16BE(i+5);
          const w = buf.readUInt16BE(i+7);
          return { width: w, height: h };
        }
        i += 2 + buf.readUInt16BE(i+2);
      }
    }
    return { width: 0, height: 0 };
  }

  resize() { return this; }
  webp() { return this; }
  async toFile(out) { await fs.copyFile(this.file, out); }
}

export default function sharp(file) {
  return new Sharp(file);
}
